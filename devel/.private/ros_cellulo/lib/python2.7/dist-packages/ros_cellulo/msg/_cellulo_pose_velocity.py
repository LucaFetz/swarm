# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_cellulo/cellulo_pose_velocity.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class cellulo_pose_velocity(genpy.Message):
  _md5sum = "018249c62debdcf00e847db2f2416aed"
  _type = "ros_cellulo/cellulo_pose_velocity"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point Position 
geometry_msgs/Point Velocity 
bool xEnabled
bool yEnabled 
bool thetaEnabled 

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['Position','Velocity','xEnabled','yEnabled','thetaEnabled']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Point','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Position,Velocity,xEnabled,yEnabled,thetaEnabled

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cellulo_pose_velocity, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Position is None:
        self.Position = geometry_msgs.msg.Point()
      if self.Velocity is None:
        self.Velocity = geometry_msgs.msg.Point()
      if self.xEnabled is None:
        self.xEnabled = False
      if self.yEnabled is None:
        self.yEnabled = False
      if self.thetaEnabled is None:
        self.thetaEnabled = False
    else:
      self.Position = geometry_msgs.msg.Point()
      self.Velocity = geometry_msgs.msg.Point()
      self.xEnabled = False
      self.yEnabled = False
      self.thetaEnabled = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d3B().pack(_x.Position.x, _x.Position.y, _x.Position.z, _x.Velocity.x, _x.Velocity.y, _x.Velocity.z, _x.xEnabled, _x.yEnabled, _x.thetaEnabled))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Position is None:
        self.Position = geometry_msgs.msg.Point()
      if self.Velocity is None:
        self.Velocity = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 51
      (_x.Position.x, _x.Position.y, _x.Position.z, _x.Velocity.x, _x.Velocity.y, _x.Velocity.z, _x.xEnabled, _x.yEnabled, _x.thetaEnabled,) = _get_struct_6d3B().unpack(str[start:end])
      self.xEnabled = bool(self.xEnabled)
      self.yEnabled = bool(self.yEnabled)
      self.thetaEnabled = bool(self.thetaEnabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d3B().pack(_x.Position.x, _x.Position.y, _x.Position.z, _x.Velocity.x, _x.Velocity.y, _x.Velocity.z, _x.xEnabled, _x.yEnabled, _x.thetaEnabled))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Position is None:
        self.Position = geometry_msgs.msg.Point()
      if self.Velocity is None:
        self.Velocity = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 51
      (_x.Position.x, _x.Position.y, _x.Position.z, _x.Velocity.x, _x.Velocity.y, _x.Velocity.z, _x.xEnabled, _x.yEnabled, _x.thetaEnabled,) = _get_struct_6d3B().unpack(str[start:end])
      self.xEnabled = bool(self.xEnabled)
      self.yEnabled = bool(self.yEnabled)
      self.thetaEnabled = bool(self.thetaEnabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d3B = None
def _get_struct_6d3B():
    global _struct_6d3B
    if _struct_6d3B is None:
        _struct_6d3B = struct.Struct("<6d3B")
    return _struct_6d3B
