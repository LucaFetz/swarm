// Generated by gencpp from file ros_cellulo_swarm/cellulo_simpleVibrate.msg
// DO NOT EDIT!


#ifndef ROS_CELLULO_SWARM_MESSAGE_CELLULO_SIMPLEVIBRATE_H
#define ROS_CELLULO_SWARM_MESSAGE_CELLULO_SIMPLEVIBRATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose2D.h>

namespace ros_cellulo_swarm
{
template <class ContainerAllocator>
struct cellulo_simpleVibrate_
{
  typedef cellulo_simpleVibrate_<ContainerAllocator> Type;

  cellulo_simpleVibrate_()
    : pose()
    , period(0)
    , duration(0)  {
    }
  cellulo_simpleVibrate_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , period(0)
    , duration(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef uint8_t _period_type;
  _period_type period;

   typedef uint8_t _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator> const> ConstPtr;

}; // struct cellulo_simpleVibrate_

typedef ::ros_cellulo_swarm::cellulo_simpleVibrate_<std::allocator<void> > cellulo_simpleVibrate;

typedef boost::shared_ptr< ::ros_cellulo_swarm::cellulo_simpleVibrate > cellulo_simpleVibratePtr;
typedef boost::shared_ptr< ::ros_cellulo_swarm::cellulo_simpleVibrate const> cellulo_simpleVibrateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_cellulo_swarm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ros_cellulo_swarm': ['/home/tprobotics/Documents/PROJECTS/catkin_ws/src/cellulo_swarm_practical_base/ros_cellulo_swarm/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9bf8782bb7ffa65e26a87eaf466aeecf";
  }

  static const char* value(const ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9bf8782bb7ffa65eULL;
  static const uint64_t static_value2 = 0x26a87eaf466aeecfULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_cellulo_swarm/cellulo_simpleVibrate";
  }

  static const char* value(const ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose2D pose\n\
uint8 period\n\
uint8 duration\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.period);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cellulo_simpleVibrate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_cellulo_swarm::cellulo_simpleVibrate_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "period: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.period);
    s << indent << "duration: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_CELLULO_SWARM_MESSAGE_CELLULO_SIMPLEVIBRATE_H
