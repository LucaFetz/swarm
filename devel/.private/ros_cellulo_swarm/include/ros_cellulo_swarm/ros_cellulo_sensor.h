// Generated by gencpp from file ros_cellulo_swarm/ros_cellulo_sensor.msg
// DO NOT EDIT!


#ifndef ROS_CELLULO_SWARM_MESSAGE_ROS_CELLULO_SENSOR_H
#define ROS_CELLULO_SWARM_MESSAGE_ROS_CELLULO_SENSOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace ros_cellulo_swarm
{
template <class ContainerAllocator>
struct ros_cellulo_sensor_
{
  typedef ros_cellulo_sensor_<ContainerAllocator> Type;

  ros_cellulo_sensor_()
    : timestamp()
    , detected(0)
    , Distance()  {
    }
  ros_cellulo_sensor_(const ContainerAllocator& _alloc)
    : timestamp()
    , detected(0)
    , Distance(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _detected_type;
  _detected_type detected;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _Distance_type;
  _Distance_type Distance;





  typedef boost::shared_ptr< ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator> const> ConstPtr;

}; // struct ros_cellulo_sensor_

typedef ::ros_cellulo_swarm::ros_cellulo_sensor_<std::allocator<void> > ros_cellulo_sensor;

typedef boost::shared_ptr< ::ros_cellulo_swarm::ros_cellulo_sensor > ros_cellulo_sensorPtr;
typedef boost::shared_ptr< ::ros_cellulo_swarm::ros_cellulo_sensor const> ros_cellulo_sensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_cellulo_swarm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ros_cellulo_swarm': ['/home/tprobotics/Documents/PROJECTS/catkin_ws/src/cellulo_swarm_practical_base/ros_cellulo_swarm/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ea4521747ea3688e29a3649a3a4b571";
  }

  static const char* value(const ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ea4521747ea3688ULL;
  static const uint64_t static_value2 = 0xe29a3649a3a4b571ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_cellulo_swarm/ros_cellulo_sensor";
  }

  static const char* value(const ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time timestamp\n\
uint8 detected\n\
geometry_msgs/Vector3[] Distance\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.detected);
      stream.next(m.Distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ros_cellulo_sensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_cellulo_swarm::ros_cellulo_sensor_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detected);
    s << indent << "Distance[]" << std::endl;
    for (size_t i = 0; i < v.Distance.size(); ++i)
    {
      s << indent << "  Distance[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.Distance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_CELLULO_SWARM_MESSAGE_ROS_CELLULO_SENSOR_H
